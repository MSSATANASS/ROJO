1.-/metadata: 
import { PlatformName } from '@cbhq/client-analytics';

// https://github.cbhq.net/infra/config-service/blob/2b99c4f536d0110c3507ba322bca3e95ff19801b/protos/coinbase/config/parameter_types.proto#L241
export const WALLET_ANDROID_CLIENT_TYPE = 7;
export const WALLET_IOS_CLIENT_TYPE = 6;
export const WALLET_EXTENSION_CLIENT_TYPE = 8;
export const WALLET_WEB_CLIENT_TYPE = 9;

export type WalletClientType = 6 | 7 | 8 | 9;

const platformToTypeMap = {
  [PlatformName.ios]: WALLET_IOS_CLIENT_TYPE,
  [PlatformName.android]: WALLET_ANDROID_CLIENT_TYPE,
  [PlatformName.extension]: WALLET_EXTENSION_CLIENT_TYPE,
  [PlatformName.web]: WALLET_WEB_CLIENT_TYPE,
};

export function getClientType(): WalletClientType {
  return platformToTypeMap[getPlatformName()!] as WalletClientType;
}
export type ClientPlatform =
  | PlatformName.ios
  | PlatformName.android
  | PlatformName.web
  | PlatformName.extension;

type ConfigOptions = {
  version?: string;
  platform?: ClientPlatform;
  // mobile only analytics
  appsFlyerAppID?: string | undefined;
  logAppsFlyerEvent?: (eventName: string) => void;
};

let metadata: ConfigOptions | undefined;

export function setApplicationMetadata(options: ConfigOptions) {
  if (metadata) {
    metadata = {
      ...metadata,
      ...options,
    };
  } else {
    metadata = options;
  }
}

export function getApplicationMetadata(): ConfigOptions {
  if (!metadata) {
    throw new Error(
      'cb-wallet-data initialization error: setApplicationMetadata must be called prior to getApplicationMetadata.',
    );
  }

  return metadata;
}

export function getPlatformName() {
  return getApplicationMetadata().platform;
}



2.-/http
 

2.1**/models
import { refreshAccessToken } from 'cb-wallet-http/Authentication/tokens/refreshAccessToken';
import { getAccessTokenFromStorage } from 'cb-wallet-http/Authentication/tokens/state';
import { getApplicationMetadata } from 'cb-wallet-metadata/metadata';
import { PlatformName } from '@cbhq/client-analytics';

type GetAuthedHeadersOptions = {
  withRetailToken?: boolean;
  withXCbwAuthorizationHeader?: boolean;
};

type RefreshAccessTokensOptions = {
  onRefreshWalletAccessToken: Parameters<typeof refreshAccessToken>[0];
  shouldRefreshWalletAccessToken?: boolean;
};

/**
 * Manages the access tokens for the wallet and retail access tokens
 * in the headers for the requests
 */
class AuthTokenManager {
  getRetailAccessToken: (() => Promise<string | null>) | undefined = undefined;
  refreshRetailAccessToken: (() => Promise<void>) | undefined = undefined;

  public getWalletAccessToken() {
    return getAccessTokenFromStorage();
  }

  public async refreshWalletAccessToken(setAuthTokens: Parameters<typeof refreshAccessToken>[0]) {
    return refreshAccessToken(setAuthTokens);
  }

  /**
   * @param withRetailToken - whether to include the retail access token in the headers
   * @param withXCbwAuthorizationHeader - whether to include the wallet access token in the X-Cbw-Authorization header
   */
  public async getAuthedHeaders({
    withRetailToken = false,
    withXCbwAuthorizationHeader = false,
  }: GetAuthedHeadersOptions = {}) {
    const { platform } = getApplicationMetadata();
    const walletAccessToken = this.getWalletAccessToken();

    // initialize the headers with the wallet access token
    // on both the Authorization and X-Cbw-Authorization headers
    const authedHeader: Record<string, string> = {
      Authorization: `Bearer ${walletAccessToken}`,
    };

    if (withXCbwAuthorizationHeader) {
      authedHeader['X-Cbw-Authorization'] = `Bearer ${walletAccessToken}`;
    }

    // Incase of Web we will be using USM cookies for making CB Retail Authed Requests
    if (withRetailToken && platform !== PlatformName.web) {
      // if error occurs, it will be caught by the caller
      const retailAccessToken = await this.getRetailAccessToken?.();

      // override the Authorization header with the retail access token
      // if it exists
      if (retailAccessToken) {
        authedHeader.Authorization = `Bearer ${retailAccessToken}`;
      } else {
        throw new Error('Failed to get retail access token.');
      }
    }

    return authedHeader;
  }

  /**
   * @param shouldRefreshWalletAccessToken - whether to explicitly refresh the wallet access token, if false, only refresh the retail access token
   */
  public async refreshAccessTokens({
    onRefreshWalletAccessToken,
    shouldRefreshWalletAccessToken = true, // default to true
  }: RefreshAccessTokensOptions) {
    if (shouldRefreshWalletAccessToken) {
      await this.refreshWalletAccessToken(onRefreshWalletAccessToken);
    } else {
      await this.refreshRetailAccessToken?.();
    }
  }
}

export const authTokenManager = new AuthTokenManager();





2.2.-webpack://cb-wallet-scw/libs/http/Authentication/tokens/refreshAccessToken.ts
import { refreshAccessToken as refresh } from '../api';
import { AccessTokenResult } from '../types/AccessTokenResult';

import { getRefreshTokenFromStorage } from './state';

let promise: undefined | Promise<AccessTokenResult>;

/**
 * Gets a new access token using the refresh token.
 *
 * @param setAuthTokens A state setter function to be called with the new tokens
 * @returns The new access token
 */
export async function refreshAccessToken(
  setAuthTokens: (tokens: AccessTokenResult) => void,
): Promise<string> {
  const refreshToken = getRefreshTokenFromStorage();
  if (!refreshToken) {
    throw new Error("Attempted to refresh access token without a refresh token. This can't work.");
  }

  let tokens: AccessTokenResult | undefined;

  // If there's already a refresh request in-flight, await the pending promise
  // rather than dispatching another request
  try {
    if (promise) {
      tokens = await promise;
    } else {
      promise = refresh(refreshToken);
      tokens = await promise;
    }
    setAuthTokens(tokens);
    return tokens.token;
  } finally {
    promise = undefined;
  }
}

export const EMPTY_REFRESH_TOKEN_RESULT = {
  token: '',
  expiresIn: Number.MAX_SAFE_INTEGER,
  refreshToken: '',
};

/**
 * Refreshes the tokens and drops the result (to revoke the existing access token)
 * - Waits for any in flight refresh requests to complete
 * - Refreshes the tokens, drops the result
 * - Resolves the promise with an empty result.
 *
 * Only used as part of sign out
 *
 * @param refreshToken the previous refresh token
 */
export async function revokeAccessToken(): Promise<void> {
  const refreshToken = getRefreshTokenFromStorage();
  if (!refreshToken) {
    // If there's no refresh token, there's nothing to revoke
    return;
  }

  // If there's already a refresh request in-flight, await the pending promise
  // rather than dispatching another request
  try {
    if (promise) {
      await promise;
    }

    promise = refresh(refreshToken).then(() => EMPTY_REFRESH_TOKEN_RESULT);
    await promise;
  } catch {
    // ignore errors
  } finally {
    promise = undefined;
  }
}








webpack://cb-wallet-scw/libs/http/Authentication/tokens/state.ts
import { LocalStorageStoreKey } from 'cb-wallet-store/models/LocalStorageStoreKey';
import { Store } from 'cb-wallet-store/Store';

import { AccessTokenResult } from '../types/AccessTokenResult';

export const StoreKeys_accessToken = new LocalStorageStoreKey<string>('accessToken');

export const StoreKeys_refreshToken = new LocalStorageStoreKey<string>('refreshToken');

export function getAccessTokenFromStorage(): string | undefined {
  return Store.get<string>(StoreKeys_accessToken);
}

export function getRefreshTokenFromStorage(): string | undefined {
  return Store.get<string>(StoreKeys_refreshToken);
}

export function setAuthTokensImperative(tokens: AccessTokenResult) {
  Store.set(StoreKeys_accessToken, tokens.token);
  Store.set(StoreKeys_refreshToken, tokens.refreshToken);
}






webpack://cb-wallet-scw/libs/http/Authentication/api.ts
import { postJSON } from 'cb-wallet-http/fetchJSON';

import { AccessTokenResult } from './types/AccessTokenResult';

type AccessTokenResponse = {
  result: AccessTokenResult;
};

/**
 * Refresh the user's access token
 *
 * @param Parameter refreshToken: The user's refresh token
 *
 * @return A Promise resolving with an AccessTokenResult.
 */
export async function refreshAccessToken(refreshToken: string): Promise<AccessTokenResult> {
  const { result } = await postJSON<AccessTokenResponse>('refreshAccessToken', {
    refreshToken,
  });
  return result;
}




webpack://cb-wallet-scw/libs/http/User/state.ts
import { LocalStorageStoreKey } from 'cb-wallet-store/models/LocalStorageStoreKey';
import { Store } from 'cb-wallet-store/Store';

export const StoreKeys_userId = new LocalStorageStoreKey<string>('userId');

// Used to set the X-Wallet-User-Id header
export function getUserIdFromStorage(): string | undefined {
  return Store.get<string>(StoreKeys_userId);
}

export function setUserIdInStorage(userId?: string) {
  Store.set(StoreKeys_userId, userId);
}




webpack://cb-wallet-scw/libs/env/env.prime.ts
/* eslint-disable no-process-env */
export const IS_PRIME = process.env.IS_PRIME === 'true';
export const PRIME_BASE_URL = process.env.PRIME_BASE_URL;
// This is ignored on the Wallet API side for prod environments
export const LOCAL_USER_ID_FOR_WALLET_API = process.env.LOCAL_USER_ID_FOR_WALLET_API;

export const OAUTH_BASE_URL = process.env.OAUTH_BASE_URL;
export const OAUTH_CLIENT_ID = process.env.OAUTH_CLIENT_ID;
export const OAUTH_CLIENT_SECRET = process.env.OAUTH_CLIENT_SECRET;




webpack://cb-wallet-scw/libs/env/env.ts
/* eslint-disable no-process-env */

if (!process.env.CB_WALLET_API_URL) {
  throw new Error('Missing ENV var: CB_WALLET_API_URL');
}

if (!process.env.SOLANA_RPC_URL) {
  throw new Error('Missing ENV var: SOLANA_RPC_URL');
}

if (!process.env.CB_API_URL) {
  throw new Error('Missing ENV var: CB_API_URL');
}

if (process.env.IS_PRIME && !process.env.PRIME_BASE_URL) {
  throw new Error('Missing ENV var: PRIME_BASE_URL');
}

export const CB_WALLET_API_URL: string = process.env.CB_WALLET_API_URL;
export const CB_WALLET_API_DEV_URL = 'https://wallet-api-dev.cbhq.net';

export const CB_WALLET_CHAIN_PROXY_URL =
  process.env.CB_WALLET_CHAIN_PROXY_URL ?? 'https://chain-proxy.wallet.coinbase.com';
export const SOLANA_RPC_URL: string = process.env.SOLANA_RPC_URL;
export const CB_API_URL: string = process.env.CB_API_URL;

export const ONRAMP_API_URL: string =
  process.env.ONRAMP_API_URL ?? 'https://onramp.wallet.coinbase.com';
export const ONRAMP_API_DEV_URL = process.env.ONRAMP_API_URL ?? 'https://onramp-api-dev.cbhq.net';
export const ONRAMP_API_LOCAL_URL = process.env.ONRAMP_API_LOCAL_URL;

export const OFFRAMP_PROD_API =
  process.env.OFFRAMP_API_URL ?? 'https://offramp.wallet.coinbase.com';
export const OFFRAMP_DEV_API = process.env.OFFRAMP_API_URL ?? 'https://offramp-wallet-dev.cbhq.net';
export const OFFRAMP_LOCAL_API = process.env.OFFRAMP_LOCAL_API;

export const RPC_REDIRECT_API_URL =
  process.env.RPC_REDIRECT_API_URL ?? 'https://rpc.wallet.coinbase.com';
export const RPC_REDIRECT_API_DEV_URL =
  process.env.RPC_REDIRECT_API_DEV_URL ?? 'https://rpc-redirect-jsonrpc-dev.cbhq.net';
export const RPC_REDIRECT_API_LOCAL_URL =
  process.env.RPC_REDIRECT_API_LOCAL_URL ?? 'https://rpc-redirect-jsonrpc-dev.cbhq.net';

export const isE2eTest = process.env.TARGET_ENV?.includes('e2e') ?? false;
export const isNonExtensionUiTest = isE2eTest && !process.env.TARGET_ENV?.includes('extension');
export const isAnyTestEnv =
  process.env.NODE_ENV === 'test' ||
  process.env.FUNCTIONAL_TEST === 'true' ||
  process.env.TARGET_ENV === 'e2e_test_ios' ||
  process.env.TARGET_ENV === 'e2e_test_android' ||
  process.env.RELEASE_STAGE === 'perf_test' ||
  process.env.RELEASE_STAGE === 'perf_test_delta';

// https://wallet-blockchain-dev.cbhq.net/
// https://blockchain.wallet.coinbase.com
export const walletBlockchainUrl = isE2eTest
  ? `${CB_WALLET_API_URL}/mock-blockchain`
  : process.env.CB_WALLET_BLOCKCHAIN_URL ?? 'https://blockchain.wallet.coinbase.com';

export const horizonUrl = isNonExtensionUiTest
  ? `${CB_WALLET_API_URL}/horizon-stellar`
  : 'https://horizon.stellar.org';

const NODE_ENV = process.env.NODE_ENV;
export const IS_PRODUCTION = NODE_ENV === 'production';

export const CBPAY_ID = process.env.CBPAY_ID;

export const WALLET_BRANCH_KEY = process.env.WALLET_BRANCH_KEY ?? '';

export const THIRDWEB_CLIENT_ID =
  process.env.THIRDWEB_CLIENT_ID ?? 'b891d14d436694bb9a7feeba91730b95';

export const TBA_SOCIAL_PINATA_GATEWAY_DOMAIN =
  process.env.TBA_SOCIAL_PINATA_GATEWAY_DOMAIN ?? 'tba-social.mypinata.cloud';

export const GOOGLE_GEOLOCATION_API_KEY = process.env.GOOGLE_GEOLOCATION_API_KEY ?? '';

// TODO Not great to have this here, but we first need to figure out websocket proxying for third-party-proxy
// In the meantime, this will be ok, it's a separate api key that we can worst-case revoke.
// Ticket to track: https://jira.coinbase-corp.com/browse/WALL-36946
const HELIUS_WS_API_KEY = 'eedae435-e8af-4109-b35e-3d57c39b1e15';
export const HELIUS_WEBSOCKET_URL = `wss://atlas-mainnet.helius-rpc.com?api-key=${HELIUS_WS_API_KEY}`;

// NOTE: On iOS we can only test & develop with the production (publicly available) relying party
export const PROD_PASSKEY_RP_ID = 'keys.coinbase.com';
export const RELEASE_STAGE = process.env.RELEASE_STAGE;
export const PASSKEY_TIMEOUT = 180000;

// RESERVOIR
export const RESERVOIR_EXECUTE_CALLS_API_URL =
  process.env.RESERVOIR_EXECUTE_CALLS_API_URL || 'https://api.relay.link/execute/call'; // default to prod




webpack://cb-wallet-scw/libs/env/productionUrls.ts
import { CB_WALLET_CHAIN_PROXY_URL } from './env';

export const ethProductionUrls = {
  ETHEREUM_MAINNET: {
    chainId: 1,
    blockExplorerUrl: 'https://etherscan.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=ethereum-mainnet`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  OPTIMISM_MAINNET: {
    chainId: 10,
    blockExplorerUrl: 'https://optimistic.etherscan.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=optimism-mainnet`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  BASE_MAINNET: {
    chainId: 8453,
    blockExplorerUrl: 'https://explorer.base.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=base`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  POLYGON_MAINNET: {
    chainId: 137,
    blockExplorerUrl: 'https://polygonscan.com',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=polygon-mainnet`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  BNB_MAINNET: {
    chainId: 56,
    blockExplorerUrl: 'https://bscscan.com',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=bsc`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  FANTOM_MAINNET: {
    chainId: 250,
    blockExplorerUrl: 'https://ftmscan.com',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=fantom`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  ARBITRUM_MAINNET: {
    chainId: 42161,
    blockExplorerUrl: 'https://arbiscan.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=arbitrum`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  GNOSIS_MAINNET: {
    chainId: 100,
    blockExplorerUrl: 'https://blockscout.com/poa/xdai',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=xdai`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  LORDCHAIN_MAINNET: {
    chainId: 84530008,
    blockExplorerUrl: 'https://lordchain-explorer.appchain.base.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=lordchain`,
    etherscanCompatibleTxHistoryApi: 'https://lordchain-explorer.appchain.base.org',
  },
  METACADE_MAINNET: {
    chainId: 845300014,
    blockExplorerUrl: 'https://metacade-explorer.appchain.base.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=metacade-mainnet`,
    etherscanCompatibleTxHistoryApi: 'https://metacade-explorer.appchain.base.org',
  },
  AVALANCHE_MAINNET: {
    chainId: 43114,
    blockExplorerUrl: 'https://snowtrace.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=avalanche`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  ZETACHAIN_MAINNET: {
    chainId: 7000,
    blockExplorerUrl: 'https://zetachain.blockscout.com',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=zetachain-mainnet`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  ZORA_MAINNET: {
    chainId: 7777777,
    blockExplorerUrl: 'https://explorer.zora.energy',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=zora-mainnet`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  // TESTNETS
  SEPOLIA: {
    chainId: 11155111,
    blockExplorerUrl: 'https://sepolia.etherscan.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=ethereum-sepolia`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  HOLESKY: {
    chainId: 17000,
    blockExplorerUrl: 'https://holesky.etherscan.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=ethereum-holesky`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  OP_SEPOLIA: {
    chainId: 11155420,
    blockExplorerUrl: 'https://optimism-sepolia.blockscout.com',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=optimism-sepolia`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  BASE_SEPOLIA: {
    chainId: 84532,
    blockExplorerUrl: 'https://sepolia.basescan.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=base-sepolia`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  BNB_TESTNET: {
    chainId: 97,
    blockExplorerUrl: 'https://testnet.bscscan.com',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=bsc-testnet`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  FANTOM_TESTNET: {
    chainId: 4002,
    blockExplorerUrl: 'https://testnet.ftmscan.com',
    rpcUrl: 'https://rpc.ankr.com/fantom_testnet',
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  ARBITRUM_SEPOLIA: {
    chainId: 421614,
    blockExplorerUrl: 'https://sepolia.arbiscan.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=arbitrum-sepolia`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  AVALANCHE_FUJI: {
    chainId: 43113,
    blockExplorerUrl: 'https://testnet.snowtrace.io',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=avalanche-fuji`,
    etherscanCompatibleTxHistoryApi: CB_WALLET_CHAIN_PROXY_URL,
  },
  LORDCHAIN_TESTNET: {
    chainId: 845320008,
    blockExplorerUrl: 'https://lordchain-explorer-testnet.appchain.base.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=lordchain-testnet`,
    etherscanCompatibleTxHistoryApi: 'https://lordchain-explorer-testnet.appchain.base.org',
  },
  SANDBOX_TESTNET: {
    chainId: 8453200058,
    blockExplorerUrl: 'https://sandbox-explorer-testnet.appchain.base.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=sandbox-testnet`,
    etherscanCompatibleTxHistoryApi: 'https://sandbox-explorer-testnet.appchain.base.org',
  },
  METACADE_TESTNET: {
    chainId: 8453200014,
    blockExplorerUrl: 'https://metacade-explorer-testnet.appchain.base.org',
    rpcUrl: `${CB_WALLET_CHAIN_PROXY_URL}?targetName=metacade-testnet`,
    etherscanCompatibleTxHistoryApi: 'https://metacade-explorer-testnet.appchain.base.org',
  },
  LOCALHOST_8545: {
    chainId: 31337,
    blockExplorerUrl: '',
    rpcUrl: 'http://127.0.0.1:8545',
    etherscanCompatibleTxHistoryApi: '',
  },
};




webpack://cb-wallet-scw/libs/env/urls.ts
import { CB_WALLET_API_URL, isNonExtensionUiTest } from './env';
import { ethProductionUrls } from './productionUrls';

export type ChainUrlGroup = {
  blockExplorerUrl: string;
  rpcUrl: string;
  etherscanCompatibleTxHistoryApi: string;
};

let ethInternalUrls:
  | Record<'COINNET_MAINNET' | 'BASENET_MAINNET', ChainUrlGroup>
  | Record<string, never> = {};

// have to use process.env directly for webpack to remove from prod build
// eslint-disable-next-line no-process-env
if (process.env.NODE_ENV === 'development') {
  // keep internal URLs private
  ethInternalUrls = {
    COINNET_MAINNET: {
      blockExplorerUrl: 'https://coinscan.cbhq.net',
      rpcUrl: 'https://coinnet.cbhq.net',
      etherscanCompatibleTxHistoryApi: 'https://coinscan.cbhq.net',
    },
    BASENET_MAINNET: {
      blockExplorerUrl: 'https://basescan.cbhq.net',
      rpcUrl: 'https://basenet.cbhq.net',
      etherscanCompatibleTxHistoryApi: 'https://basescan.cbhq.net',
    },
  };
}

const allEthUrls = {
  ...ethProductionUrls,
  ...ethInternalUrls,
};

const e2eUrls = Object.keys(allEthUrls).reduce((map, key) => {
  // eslint-disable-next-line no-param-reassign -- this param is an accumulator
  map[key] = {
    blockExplorerUrl: `${CB_WALLET_API_URL}/mock-block-explorer`,
    rpcUrl: `${CB_WALLET_API_URL}/mock-chain-rpc`,
    etherscanCompatibleTxHistoryApi: `${CB_WALLET_API_URL}/mock-etherscan-${key}`,
  };
  return map;
}, {} as Record<string, ChainUrlGroup>) as any;

export const ethereumUrls = isNonExtensionUiTest ? e2eUrls : allEthUrls;




webpack://cb-wallet-scw/libs/env/whitelistedChains.ts
/* eslint-disable no-process-env */
import { IS_PRIME } from './env.prime';
import { ethereumUrls } from './urls';

const ethereumNetworkAttributes = {
  blockchainSymbol: 'ETH',
  isNonEthChain: false,
};

const primeUnsupportedChains = {
  ZETACHAIN_MAINNET: {
    baseAssetCurrencyCode: 'ZETA',
    baseAssetImageUrl:
      'https://asset-metadata-service-production.s3.amazonaws.com/asset_icons/ef9e387c9bf4354c6163feeb01183f15f362d500e6cb7b0d9a2ed3346e0256a8.png',
    baseAssetDisplayName: 'ZETA',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://asset-metadata-service-production.s3.amazonaws.com/asset_icons/ef9e387c9bf4354c6163feeb01183f15f362d500e6cb7b0d9a2ed3346e0256a8.png',
    displayName: 'ZetaChain',
    isTestnet: false,
    isLayer2: false,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ETHERSCAN_API_KEY, // required for client to hit chain-proxy endpoint
    wacNetworkId: 'networks/zetachain-mainnet',
    chainProxyTarget: 'zetachain-mainnet-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.ZETACHAIN_MAINNET,
  },
  ZORA_MAINNET: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Ethereum',
    baseAssetDecimal: 18,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/chains/zora-logo.png',
    displayName: 'Zora',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isOvmNetwork: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ETHERSCAN_API_KEY, // required for client to hit chain-proxy endpoint
    isNudgeSupported: true,
    wacNetworkId: 'networks/zora-mainnet',
    chainProxyTarget: 'zora-mainnet-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.ZORA_MAINNET,
  },
  LORDCHAIN_TESTNET: {
    baseAssetCurrencyCode: 'LRDS',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/76/5e/765efd83724794e0fe44caee4cf493e2838a632124833382409a5a7e55625f8e-MDAyMWQ3MTctOWZkMC00MWE5LTgxYTMtNmU1YzE4YTA3N2Mx',
    baseAssetDisplayName: 'LORDCHAIN',
    baseAssetDecimal: 18,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/chains/lordchain-logo.png',
    displayName: 'LORDCHAIN TESTNET',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isNudgeSupported: true,
    wacNetworkId: 'networks/lordchain-testnet',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.LORDCHAIN_TESTNET,
  },
  LORDCHAIN_MAINNET: {
    baseAssetCurrencyCode: 'LRDS',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/76/5e/765efd83724794e0fe44caee4cf493e2838a632124833382409a5a7e55625f8e-MDAyMWQ3MTctOWZkMC00MWE5LTgxYTMtNmU1YzE4YTA3N2Mx',
    baseAssetDisplayName: 'LORDCHAIN',
    baseAssetDecimal: 18,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/chains/lordchain-logo.png',
    displayName: 'LORDCHAIN',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isNudgeSupported: true,
    wacNetworkId: 'networks/lordchain-mainnet',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.LORDCHAIN_MAINNET,
  },
  SANDBOX_TESTNET: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl: 'https://wallet-api-production.s3.amazonaws.com/uploads/tokens/eth_288.png',
    baseAssetDisplayName: 'Ether',
    baseAssetDecimal: 18,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/base-logo.png',
    displayName: 'Sandbox Testnet',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isNudgeSupported: true,
    wacNetworkId: 'networks/sandbox-testnet',
    chainProxyTarget: 'sandbox-testnet-explorer',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.SANDBOX_TESTNET,
  },
  METACADE_MAINNET: {
    baseAssetCurrencyCode: 'MCADE',
    baseAssetImageUrl: 'https://go.wallet.coinbase.com/static/chains/metacade-logo.png',
    baseAssetDisplayName: 'Metacade',
    baseAssetDecimal: 18,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/chains/metacade-logo.png',
    displayName: 'Metacade',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isNudgeSupported: true,
    wacNetworkId: 'networks/metacade-mainnet',
    chainProxyTarget: 'metacade-mainnet-explorer',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.METACADE_MAINNET,
  },
  METACADE_TESTNET: {
    baseAssetCurrencyCode: 'MCADE',
    baseAssetImageUrl: 'https://go.wallet.coinbase.com/static/chains/metacade-logo.png',
    baseAssetDisplayName: 'Metacade',
    baseAssetDecimal: 18,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/chains/metacade-logo.png',
    displayName: 'Metacade Testnet',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isNudgeSupported: true,
    wacNetworkId: 'networks/metacade-testnet',
    chainProxyTarget: 'metacade-testnet-explorer',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.METACADE_TESTNET,
  },
};

export const whitelistedChains = {
  ETHEREUM_MAINNET: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Ethereum',
    baseAssetDecimal: 18,
    displayName: 'Ethereum',
    isTestnet: false,
    isLayer2: false,
    is1559Enabled: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ETHERSCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/ethereum-mainnet',
    chainImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    chainProxyTarget: 'ethereum-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.ETHEREUM_MAINNET,
  },
  OPTIMISM_MAINNET: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Ethereum',
    baseAssetDecimal: 18,
    displayName: 'OP Mainnet',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isOvmNetwork: true,
    etherscanLikeApiKey: process.env.OPTIMISM_API_KEY,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/assets/optimism.png',
    isNudgeSupported: true,
    wacNetworkId: 'networks/optimism-mainnet',
    chainProxyTarget: 'optimism-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.OPTIMISM_MAINNET,
  },
  BASE_MAINNET: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Ethereum',
    baseAssetDecimal: 18,
    displayName: 'Base',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isOvmNetwork: true,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/base-logo.png',
    isNudgeSupported: true,
    chainProxyTarget: 'basescan',
    wacNetworkId: 'networks/base-mainnet',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.BASE_MAINNET,
  },
  POLYGON_MAINNET: {
    baseAssetCurrencyCode: 'POL',
    baseAssetImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/b474d4bf3af389e5f26ed66956f1da8a/maticLogo.png',
    baseAssetDisplayName: 'Polygon Ecosystem Token',
    baseAssetDecimal: 18,
    displayName: 'Polygon',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.POLYGONSCAN_API_KEY,
    chainImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/tokens/0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0_64.png',
    isNudgeSupported: true,
    wacNetworkId: 'networks/polygon-mainnet',
    chainProxyTarget: 'polygonscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.POLYGON_MAINNET,
  },
  BNB_MAINNET: {
    baseAssetCurrencyCode: 'BNB',
    baseAssetImageUrl:
      'https://djly28hup5duz.cloudfront.net/wallet/wais/ea/1d/ea1dd1e2173d23bf2fdd95f78c145d064700aaccc24380403e73bbda74183742-MjQwOWEyYzYtMjUyMy00OGY4LTkxYzAtY2FlMzQyMmU1YTMw',
    baseAssetDisplayName: 'BNB',
    baseAssetDecimal: 18,
    displayName: 'BNB (Binance Smart) Chain',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.BSCSCAN_API_KEY,
    chainImageUrl: 'https://wallet-api-production.s3.amazonaws.com/uploads/tokens/bnb_288.png',
    isNudgeSupported: true,
    wacNetworkId: 'networks/bnb-mainnet',
    chainProxyTarget: 'bsc-bscscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.BNB_MAINNET,
  },
  FANTOM_MAINNET: {
    baseAssetCurrencyCode: 'FTM',
    baseAssetImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/ddbcf362d2717855adb007691745b83f/ftm_logo.png',
    baseAssetDisplayName: 'FTM',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/ddbcf362d2717855adb007691745b83f/ftm_logo.png',
    displayName: 'Fantom Opera',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.FANTOMSCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/fantom-mainnet',
    chainProxyTarget: 'fantom-ftmscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.FANTOM_MAINNET,
  },
  ARBITRUM_MAINNET: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Ethereum',
    baseAssetDecimal: 18,
    displayName: 'Arbitrum',
    isTestnet: false,
    isLayer2: true,
    // Arbitrum is a legacy chain but supports EIP-1559 gas structure
    // This is currently only enabled for Prime as it has been tested with EIP-1559
    // Limiting to Prime only to avoid unwanted side effects in other products
    is1559Enabled: IS_PRIME,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ARBISCAN_API_KEY,
    chainImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/5f/45/5f45a2999ef5c8ba72fa5bc5275b38a44f196cb64fd12cd8996ae70f13a8910c-OGRkMmQyZTYtMzA1OS00OGMxLThjNWMtYjExODY5YmM2Mzhi',
    isNudgeSupported: true,
    wacNetworkId: 'networks/arbitrum-mainnet',
    chainProxyTarget: 'arbitrum-arbiscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.ARBITRUM_MAINNET,
  },
  GNOSIS_MAINNET: {
    baseAssetCurrencyCode: 'XDAI',
    baseAssetImageUrl: 'https://static-assets.coinbase.com/wallet/assets/xdai.png',
    baseAssetDisplayName: 'xDai',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://dynamic-assets.coinbase.com/d1afa9a4f7ce51fa1af1ab94a15ea875a4df2b9a0b6ca619ea3de482d688198d67112c70516b703405b01d9abd5856493c238fe58004b63f4c5b5986a7624da2/asset_icons/b2e81465e2ac5d20898c4793c1c672073895ba71688ad1044a01011fe555ca88.png',
    displayName: 'Gnosis',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.XDAI_API_KEY,
    isNudgeSupported: true,04:32 a. m. 16/08/2025
    wacNetworkId: 'networks/xdai-mainnet',
    chainProxyTarget: 'gnosis-gnosisscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.GNOSIS_MAINNET,
  },
  ...(IS_PRIME ? {} : { LORDCHAIN_MAINNET: primeUnsupportedChains.LORDCHAIN_MAINNET }),
  AVALANCHE_MAINNET: {
    baseAssetCurrencyCode: 'AVAX',
    baseAssetImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/889d119cede59f72d7dae9132b2d35fc/avax_logo.png',
    baseAssetDisplayName: 'AVAX',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/889d119cede59f72d7dae9132b2d35fc/avax_logo.png',
    displayName: 'Avalanche C-Chain',
    isTestnet: false,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.SNOWTRACE_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/avacchain-mainnet',
    chainProxyTarget: 'avalanche-snowtrace',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.AVALANCHE_MAINNET,
  },
  ...(IS_PRIME ? {} : { ZETACHAIN_MAINNET: primeUnsupportedChains.ZETACHAIN_MAINNET }),
  ...(IS_PRIME ? {} : { ZORA_MAINNET: primeUnsupportedChains.ZORA_MAINNET }),
  ...(IS_PRIME ? {} : { METACADE_MAINNET: primeUnsupportedChains.METACADE_MAINNET }),
  // TESTNETS
  HOLESKY: {
    baseAssetCurrencyCode: undefined,
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Holesky Ethereum',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    displayName: 'Holesky',
    isTestnet: true,
    isLayer2: false,
    is1559Enabled: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ETHERSCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/ethereum-holesky-testnet',
    chainProxyTarget: 'ethereum-holesky-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.HOLESKY,
  },
  SEPOLIA: {
    baseAssetCurrencyCode: undefined,
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Sepolia Ethereum',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    displayName: 'Sepolia',
    isTestnet: true,
    isLayer2: false,
    is1559Enabled: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ETHERSCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/ethereum-sepolia-testnet',
    chainProxyTarget: 'ethereum-sepolia-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.SEPOLIA,
  },
  OP_SEPOLIA: {
    baseAssetCurrencyCode: undefined,
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Sepolia Ethereum',
    baseAssetDecimal: 18,
    displayName: 'OP Sepolia',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isOvmNetwork: true,
    etherscanLikeApiKey: process.env.ETHERSCAN_API_KEY,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/assets/optimism.png',
    isNudgeSupported: true,
    wacNetworkId: 'networks/optimism-sepolia-testnet',
    chainProxyTarget: 'optimism-sepolia-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.OP_SEPOLIA,
  },
  BASE_SEPOLIA: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Sepolia Ethereum',
    baseAssetDecimal: 18,
    displayName: 'Base Sepolia',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    isOvmNetwork: true,
    chainImageUrl: 'https://go.wallet.coinbase.com/static/base-logo.png',
    isNudgeSupported: true,
    chainProxyTarget: 'base-sepolia-etherscan',
    wacNetworkId: 'networks/base-sepolia-testnet',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.BASE_SEPOLIA,
  },
  BNB_TESTNET: {
    baseAssetCurrencyCode: 'BNB',
    baseAssetImageUrl:
      'https://djly28hup5duz.cloudfront.net/wallet/wais/ea/1d/ea1dd1e2173d23bf2fdd95f78c145d064700aaccc24380403e73bbda74183742-MjQwOWEyYzYtMjUyMy00OGY4LTkxYzAtY2FlMzQyMmU1YTMw',
    baseAssetDisplayName: 'BNB',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://djly28hup5duz.cloudfront.net/wallet/wais/ea/1d/ea1dd1e2173d23bf2fdd95f78c145d064700aaccc24380403e73bbda74183742-MjQwOWEyYzYtMjUyMy00OGY4LTkxYzAtY2FlMzQyMmU1YTMw',
    displayName: 'BNB (Binance Smart) Chain Testnet',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.BSCSCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/bnb-testnet',
    chainProxyTarget: 'bsc-testnet-bscscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.BNB_TESTNET,
  },
  FANTOM_TESTNET: {
    baseAssetCurrencyCode: 'FTM',
    baseAssetImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/ddbcf362d2717855adb007691745b83f/ftm_logo.png',
    baseAssetDisplayName: 'FTM',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/ddbcf362d2717855adb007691745b83f/ftm_logo.png',
    displayName: 'Fantom Testnet',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.FANTOMSCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/fantom-testnet',
    chainProxyTarget: 'fantom-testnet-ftmscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.FANTOM_TESTNET,
  },
  ARBITRUM_SEPOLIA: {
    baseAssetCurrencyCode: undefined,
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Sepolia Ethereum',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/5f/45/5f45a2999ef5c8ba72fa5bc5275b38a44f196cb64fd12cd8996ae70f13a8910c-OGRkMmQyZTYtMzA1OS00OGMxLThjNWMtYjExODY5YmM2Mzhi',
    displayName: 'Arbitrum Sepolia',
    isTestnet: true,
    isLayer2: true,
    // Arbitrum is a legacy chain but supports EIP-1559 gas structure
    // This is currently only enabled for Prime as it has been tested with EIP-1559
    // Limiting to Prime only to avoid unwanted side effects in other products
    is1559Enabled: IS_PRIME,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.ARBISCAN_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/arbitrum-sepolia-testnet',
    chainProxyTarget: 'arbitrum-sepolia-etherscan',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.ARBITRUM_SEPOLIA,
  },
  AVALANCHE_FUJI: {
    baseAssetCurrencyCode: 'AVAX',
    baseAssetImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/889d119cede59f72d7dae9132b2d35fc/avax_logo.png',
    baseAssetDisplayName: 'Testnet AVAX',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://wallet-api-production.s3.amazonaws.com/uploads/889d119cede59f72d7dae9132b2d35fc/avax_logo.png',
    displayName: 'Avalanche Fuji',
    isTestnet: true,
    isLayer2: true,
    is1559Enabled: true,
    isCustomNetwork: false,
    etherscanLikeApiKey: process.env.SNOWTRACE_API_KEY,
    isNudgeSupported: true,
    wacNetworkId: 'networks/avacchain-fuji-testnet',
    chainProxyTarget: 'avalanche-fuji-snowtrace',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.AVALANCHE_FUJI,
  },
  ...(IS_PRIME ? {} : { LORDCHAIN_TESTNET: primeUnsupportedChains.LORDCHAIN_TESTNET }),
  LOCALHOST_8545: {
    baseAssetCurrencyCode: 'ETH',
    baseAssetImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    baseAssetDisplayName: 'Localhost ETH',
    baseAssetDecimal: 18,
    chainImageUrl:
      'https://d3r81g40ycuhqg.cloudfront.net/wallet/wais/07/23/0723c996feb7dc2d87bec4191b6af4721acfd4898759a1fa85686ae2d67f8982-ZTZjN2NhNjAtODI2Ni00YmU4LWI4NTgtOWNiZTUyYzQ3MDc4',
    displayName: 'Localhost 8545',
    isTestnet: true,
    isLayer2: false,
    is1559Enabled: false,
    isCustomNetwork: false,
    etherscanLikeApiKey: '',
    ...ethereumNetworkAttributes,
    ...ethereumUrls.LOCALHOST_8545,
  },
  ...(IS_PRIME ? {} : { SANDBOX_TESTNET: primeUnsupportedChains.SANDBOX_TESTNET }),
  ...(IS_PRIME ? {} : { METACADE_TESTNET: primeUnsupportedChains.METACADE_TESTNET }),
};




